generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // If you want to use Prisma Migrate, you will need to manually create a shadow database
  // https://neon.tech/docs/guides/prisma-migrate#configure-a-shadow-database-for-prisma-migrate
  // make sure to append ?connect_timeout=10 to the connection string
  // shadowDatabaseUrl = env(“SHADOW_DATABASE_URL”)
}

model User {
  id              Int         @id @default(autoincrement())
  last            String
  first           String
  email           String      @unique
  picture         String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  activated       Boolean     @default(false)
  role            Role        @default(USER)
  credential      Credential?
  stats           Stats?
  student         Student?    @relation(fields: [studentGakuseki], references: [gakuseki])
  studentGakuseki Int?

  driveFileData DriveFileData[]
  oldId         BigInt?         @unique
}

model Credential {
  id                 Int      @id @default(autoincrement())
  accessToken        String
  scope              String
  tokenType          String
  expiry             DateTime @default(now())
  refreshToken       String?
  refreshTokenExpiry DateTime @default(now())
  createdAt          DateTime @default(now())
  userId             Int      @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Stats {
  id          Int      @id @default(autoincrement())
  count       Int      @default(0)
  lastVisited DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int      @unique
}

model Student {
  gakuseki   Int      @id @unique
  gakunen    String
  hr         String
  hrNo       Int
  last       String
  first      String
  sei        String
  mei        String
  email      String   @unique
  folderLink String?
  createdAt  DateTime @default(now())
  expiry     DateTime @default(now())

  users User[]
}

model DriveFileData {
  fileId         String   @id @unique
  name           String
  mimeType       String
  iconLink       String
  hasThumbnail   Boolean
  thumbnailLink  String?
  webViewLink    String?
  webContentLink String?
  parents        String[]
  appProperties  String?
  createdTime    DateTime
  modifiedTime   DateTime
  views          Int      @default(0)
  firstSeen      DateTime @default(now())
  lastSeen       DateTime @default(now())

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}
